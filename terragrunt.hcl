locals {
  # Remote state S3 Bucket ID generated by bootstrap
  bucket_id = "remote-state-bucket-id"

  # Remote state DynamoDB Table generated by bootstrap
  dynamodb_table = "remote-state-dynamodb-table"

  # ARN of assume role with access to remote state bucket and dynamodb table generated by bootstrap
  assume_role_arn = "assume-role-arn"

  # Automatically load account-level variables
  account_id = read_terragrunt_config(find_in_parent_folders("account.hcl"))

  # Automatically load region-level variables
  region = read_terragrunt_config(find_in_parent_folders("region.hcl"))

  # Extract the variables we need for easy access
  account_id = local.account_id.locals.account_id
  region     = local.region.locals.region
}

# Generate an AWS provider block
generate "provider" {
  path      = "terragrunt_generated_provider.tf"
  if_exists = "overwrite_terragrunt"

  contents  = <<EOF
provider "aws" {
  region = "${local.region}"

  
  assume_role {
    role_arn = local.assume_role_arn
  }

  # Only these AWS Account IDs may be operated on by this template
  allowed_account_ids = ["${local.account_id}"]
}
EOF
}

# Configure Terragrunt to automatically store tfstate files in an S3 bucket
remote_state {
  backend = "s3"

  config = {
    encrypt        = true
    bucket         = local.bucket_id
    key            = "${path_relative_to_include()}/terraform.tfstate"
    region         = local.aws_region
    dynamodb_table = local.dynamodb_table
  }

  generate = {
    path      = "terragrunt_generated_backend.tf"
    if_exists = "overwrite_terragrunt"
  }
}

# Add inputs to all child modules. 
inputs = {
  tags = {
    terragrunt_config = path_relative_to_include()   
  }
}
